# -*- coding: utf-8 -*-
"""build your own GPT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zuwzKZx3Rif6b5NJHLUjkgw5iGqyGp3F
"""

# Import the dataset, we're using tinyshakespeare to train our model
# It will basically train our model on all of Shakespeare's work
!wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt

# Read the input file
with open('input.txt', 'r', encoding = 'UTF-8') as f:
  text = f.read()

print('Length of dataset in character: ', len(text))

# First 500 characters
print(text[:500])

# Get all the unique characters from the dataset(convert to set)
# Convert to list so it is ordered, then sort it
chars = sorted(list(set(text)))
print(len(chars))
vocab_size = len(chars)

# View all characters
print(''.join(chars))

# TOKENIZATION:
# Creating a mapping from characters to integers
string_to_integer = {ch:i for i, ch in enumerate(chars)}
# Creating a mapping from integers to characters
integer_to_string = {i:ch for i, ch in enumerate(chars)}

# Run a for loop through the string, get the integer value from
# the map for each string and return it as list
def encode(string):
    return [string_to_integer[c] for c in string]

# Given a list of integers, run a loop through them and get the
# char value from the mapping for each integer
def decode(integers):
    return ''.join(integer_to_string[i] for i in integers)

print(string_to_integer)
print(integer_to_string)
print(encode('Mohib'))
print(decode(encode('Mohib')))

# Encode the data and store it into a tensor(multi-dimensional array)
import torch
data = torch.tensor(encode(text), dtype = torch.long)
print(data.shape, data.dtype)
print(data[:500])

# Train, val split
n = int(0.9 * len(data))
train_data = data[:n]
val_data = data[n:]

# Block size is basically the chunks of data we're to feed our model
# We can't simply feed the entire data bcz computationally
# it would be inefficient
block_size = 8
print(train_data[:block_size])

# This block of code is written to show how our model will
# understand contexts, meaning when 18 comes, 47 will come
# When 18, 47 comes, then 56 comes and so on
x = train_data[:block_size]
y = train_data[1:block_size + 1]
for t in range(block_size):
  context = x[:t + 1]
  target = y[t]
  print(f'When input is {context} the target is {target}')

torch.manual_seed(1337)
#batch size =  the number of training examples utilized in one iteration
batch_size = 4
# block_size = size of 1 chunk of data
block_size = 8
def get_batch(split):
  # Generate a batch of inputs 'x' and targets' y'
  data = train_data if split == 'train' else val_data
  ix = torch.randint(len(data) - block_size, (batch_size, ))
  x = torch.stack([data[i: i + block_size] for i in ix])
  y = torch.stack([data[i + 1: i + block_size + 1] for i in ix])
  return x, y
xb, yb = get_batch('train')
print('Inputs: ')
print(xb.shape)
print(xb)
print('Targets: ')
print(yb.shape)
print(yb)

for b in range(batch_size):
  for t in range(block_size):
    context = xb[b, :t + 1]
    target = yb[b, t]
    print(f'When input is {context.tolist()} the target is {target}')

# Our input to the model
print(xb)

import torch
import torch.nn as nn
from torch.nn import functional as F
torch.manual_seed(1337)

class BigramLanguageModel(nn.Module):
  def __init__(self, vocab_size):
    super().__init__()
    #Each token reads of its respecting row from the embedding table
    # E.g 24 reads row 24, 43 reads row 43
    self.token_embedding_table = nn.Embedding(vocab_size, vocab_size) #65x65

  def forward(self, idx, targets=None): # idx is Batch, targets is Time dimension
    logits = self.token_embedding_table(idx) #(B,T,C) (Batch, Time, Channel) (4, 8, 65)
    if targets is None:
      loss = None
    else:

      # Calculating loss to compare how well our model works
      # loss = F.cross_entropy(logits, targets)
      # This loss doesn't work bcz pytorch's cross_entropy func expects
      # channel 'C' as the second parameter
      b, t, c = logits.shape
      logits = logits.view(b * t, c)
      targets = targets.view(b * t)
      loss = F.cross_entropy(logits, targets)
    return logits, loss
  def generate(self, idx, max_new_tokens):
    #idx is the (b, t) array of indices in the current context
    for _ in range(max_new_tokens):
      #get the predictions
      logits, loss = self(idx)
      logits = logits[:, -1, :] #becomes (b, c)
      # Apply softmax function to get probabilities
      probs = F.softmax(logits, dim = -1) #(b, c)
      idx_next = torch.multinomial(probs, num_samples = 1) #(b, 1)
      #Append new index to the sequence
      idx = torch.cat((idx, idx_next), dim = 1) # (b, t + 1)
    return idx


m = BigramLanguageModel(vocab_size)
logits, loss = m(xb, yb)
print(logits.shape)
print(loss)
# Generate using the function torch.zeros((1, 1) means a tesnor of all zero basically our starting point for the generation
print(decode(m.generate(idx = torch.zeros((1, 1), dtype=torch.long), max_new_tokens=100)[0].tolist()))

# Create a pytorch optimizer
optimizer = torch.optim.AdamW(m.parameters(), lr = 1e-3)

batch_size = 32
  # the loss for range 100 starts with 4.7 and ends with 4.6
  # So lets increase the range
for steps in range(10000):
  # Get a batch of data
  xb, yb = get_batch('train')

  # Evaluate loss
  logits, loss = m(xb, yb)
  optimizer.zero_grad(set_to_none = True)
  loss.backward()
  optimizer.step()
print(loss.item()) # The last loss value

# Loss has been decreased to 2.37 so lets try to generate now
print(decode(m.generate(idx = torch.zeros((1, 1), dtype=torch.long), max_new_tokens=500)[0].tolist()))

torch.manual_seed(1337)
B, T, C = 4, 8, 2
x = torch.randn(B, T, C)
x.shape

# For now the tokens are not in contact with each other, we need a token to stay in contact
# with its past tokens so that it understands context
# Version 1: Using for loops
B, T, C = 4, 8, 2
xbow = torch.zeros((B,T,C))
for b in range(B):
    for t in range(T):
        xprev = x[b,:t+1] # (t,C)
        xbow[b,t] = torch.mean(xprev, 0)

print(x[0])

print(xbow[0]) # We can see the first line  [0.1808, -0.0700] same in both
# But the next line in words is different as it is the average of first two lines
# in x

# illustrating how matrix multiplication can be used for a "weighted aggregation"
torch.manual_seed(42)
a = torch.tril(torch.ones(3, 3))
a = a / torch.sum(a, 1, keepdim=True)
b = torch.randint(0,10,(3,2)).float()
c = a @ b
print('a=')
print(a)
print('--')
print('b=')
print(b)
print('--')
print('c=')
print(c)

# version 2: using matrix multiply for a weighted aggregation
weights = torch.tril(torch.ones(T, T))
weights = weights / weights.sum(1, keepdim=True)
xbow2 = weights @ x # (B, T, T) @ (B, T, C) ----> (B, T, C)
torch.allclose(xbow, xbow2)

print(xbow2[0], xbow2[0])

# Version 3: Using softmax function
tril = torch.tril(torch.ones(T, T))
# All zeros
weights = torch.zeros((T,T))
# Fill with -inf in upper triangular of the matrix
weights = weights.masked_fill(tril == 0, float('-inf'))
# Apply softmax function to get the same matrix as V1, V2
weights = F.softmax(weights, dim=-1)
xbow3 = weights @ x
torch.allclose(xbow2, xbow3)

tril

print(weights)

# version 4: Self-attention
torch.manual_seed(1337)
B,T,C = 4,8,32 # batch, time, channel
x = torch.randn(B,T,C)

# self-attention in 1 head
head_size = 16
key = nn.Linear(C, head_size, bias=False)
query = nn.Linear(C, head_size, bias=False)
value = nn.Linear(C, head_size, bias=False)
k = key(x)   # (B, T, 16)
q = query(x) # (B, T, 16)
weights =  q @ k.transpose(-2, -1) # (B, T, 16) @ (B, 16, T) ---> (B, T, T)

tril = torch.tril(torch.ones(T, T))
#weights = torch.zeros((T,T))
weights = weights.masked_fill(tril == 0, float('-inf'))
weights = F.softmax(weights, dim=-1)

v = value(x)
out = weights @ v
#out = weights @ x

out.shape

weights[0]

k = torch.randn(B,T,head_size)
q = torch.randn(B,T,head_size)
weights = q @ k.transpose(-2, -1) * head_size**-0.5

k.var()

q.var()

weights.var()

context = torch.zeros((1, 1), dtype=torch.long, device=device)
print(decode(m.generate(context, max_new_tokens=2000)[0].tolist()))

# We have done basics of self-attention
# Below is the completed code, using multiple heads
# This is done exactly as in the video of Andrej Karpathy titled:
# Let's build GPT: from scratch, in code, spelled out.
# https://youtu.be/kCc8FmEb1nY?si=PIsC64T5yEP21ga6
import torch
import torch.nn as nn
from torch.nn import functional as F

# hyperparameters
batch_size = 16 # how many independent sequences will we process in parallel?
block_size = 32 # what is the maximum context length for predictions?
max_iters = 5000
eval_interval = 100
learning_rate = 1e-3
device = 'cuda' if torch.cuda.is_available() else 'cpu'
eval_iters = 200
n_embd = 64
n_head = 4
n_layer = 4
dropout = 0.2
# ------------

torch.manual_seed(1337)

!wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt
with open('input.txt', 'r', encoding='utf-8') as f:
    text = f.read()

# here are all the unique characters that occur in this text
chars = sorted(list(set(text)))
vocab_size = len(chars)
# create a mapping from characters to integers
stoi = { ch:i for i,ch in enumerate(chars) }
itos = { i:ch for i,ch in enumerate(chars) }
encode = lambda s: [stoi[c] for c in s] # encoder: take a string, output a list of integers
decode = lambda l: ''.join([itos[i] for i in l]) # decoder: take a list of integers, output a string

# Train and test splits
data = torch.tensor(encode(text), dtype=torch.long)
n = int(0.9*len(data)) # first 90% will be train, rest val
train_data = data[:n]
val_data = data[n:]

# data loading
def get_batch(split):
    # generate a small batch of data of inputs x and targets y
    data = train_data if split == 'train' else val_data
    ix = torch.randint(len(data) - block_size, (batch_size,))
    x = torch.stack([data[i:i+block_size] for i in ix])
    y = torch.stack([data[i+1:i+block_size+1] for i in ix])
    x, y = x.to(device), y.to(device)
    return x, y

@torch.no_grad()
def estimate_loss():
    out = {}
    model.eval()
    for split in ['train', 'val']:
        losses = torch.zeros(eval_iters)
        for k in range(eval_iters):
            X, Y = get_batch(split)
            logits, loss = model(X, Y)
            losses[k] = loss.item()
        out[split] = losses.mean()
    model.train()
    return out

class Head(nn.Module):
    """ one head of self-attention """

    def __init__(self, head_size):
        super().__init__()
        self.key = nn.Linear(n_embd, head_size, bias=False)
        self.query = nn.Linear(n_embd, head_size, bias=False)
        self.value = nn.Linear(n_embd, head_size, bias=False)
        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))

        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        B,T,C = x.shape
        k = self.key(x)   # (B,T,C)
        q = self.query(x) # (B,T,C)
        # compute attention scores ("affinities")
        wei = q @ k.transpose(-2,-1) * C**-0.5 # (B, T, C) @ (B, C, T) -> (B, T, T)
        wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf')) # (B, T, T)
        wei = F.softmax(wei, dim=-1) # (B, T, T)
        wei = self.dropout(wei)
        # perform the weighted aggregation of the values
        v = self.value(x) # (B,T,C)
        out = wei @ v # (B, T, T) @ (B, T, C) -> (B, T, C)
        return out

class MultiHeadAttention(nn.Module):
    """ multiple heads of self-attention in parallel """

    def __init__(self, num_heads, head_size):
        super().__init__()
        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])
        self.proj = nn.Linear(n_embd, n_embd)
        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        out = torch.cat([h(x) for h in self.heads], dim=-1)
        out = self.dropout(self.proj(out))
        return out

class FeedFoward(nn.Module):
    """ a simple linear layer followed by a non-linearity """

    def __init__(self, n_embd):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(n_embd, 4 * n_embd),
            nn.ReLU(),
            nn.Linear(4 * n_embd, n_embd),
            nn.Dropout(dropout),
        )

    def forward(self, x):
        return self.net(x)

class Block(nn.Module):
    """ Transformer block: communication followed by computation """

    def __init__(self, n_embd, n_head):
        # n_embd: embedding dimension, n_head: the number of heads we'd like
        super().__init__()
        head_size = n_embd // n_head
        self.sa = MultiHeadAttention(n_head, head_size)
        self.ffwd = FeedFoward(n_embd)
        self.ln1 = nn.LayerNorm(n_embd)
        self.ln2 = nn.LayerNorm(n_embd)

    def forward(self, x):
        x = x + self.sa(self.ln1(x))
        x = x + self.ffwd(self.ln2(x))
        return x

# super simple bigram model
class BigramLanguageModel(nn.Module):

    def __init__(self):
        super().__init__()
        # each token directly reads off the logits for the next token from a lookup table
        self.token_embedding_table = nn.Embedding(vocab_size, n_embd)
        self.position_embedding_table = nn.Embedding(block_size, n_embd)
        self.blocks = nn.Sequential(*[Block(n_embd, n_head=n_head) for _ in range(n_layer)])
        self.ln_f = nn.LayerNorm(n_embd) # final layer norm
        self.lm_head = nn.Linear(n_embd, vocab_size)

    def forward(self, idx, targets=None):
        B, T = idx.shape

        # idx and targets are both (B,T) tensor of integers
        tok_emb = self.token_embedding_table(idx) # (B,T,C)
        pos_emb = self.position_embedding_table(torch.arange(T, device=device)) # (T,C)
        x = tok_emb + pos_emb # (B,T,C)
        x = self.blocks(x) # (B,T,C)
        x = self.ln_f(x) # (B,T,C)
        logits = self.lm_head(x) # (B,T,vocab_size)

        if targets is None:
            loss = None
        else:
            B, T, C = logits.shape
            logits = logits.view(B*T, C)
            targets = targets.view(B*T)
            loss = F.cross_entropy(logits, targets)

        return logits, loss

    def generate(self, idx, max_new_tokens):
        # idx is (B, T) array of indices in the current context
        for _ in range(max_new_tokens):
            # crop idx to the last block_size tokens
            idx_cond = idx[:, -block_size:]
            # get the predictions
            logits, loss = self(idx_cond)
            # focus only on the last time step
            logits = logits[:, -1, :] # becomes (B, C)
            # apply softmax to get probabilities
            probs = F.softmax(logits, dim=-1) # (B, C)
            # sample from the distribution
            idx_next = torch.multinomial(probs, num_samples=1) # (B, 1)
            # append sampled index to the running sequence
            idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)
        return idx

model = BigramLanguageModel()
m = model.to(device)
# print the number of parameters in the model
print(sum(p.numel() for p in m.parameters())/1e6, 'M parameters')

# create a PyTorch optimizer
optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)

for iter in range(max_iters):

    # every once in a while evaluate the loss on train and val sets
    if iter % eval_interval == 0 or iter == max_iters - 1:
        losses = estimate_loss()
        print(f"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}")

    # sample a batch of data
    xb, yb = get_batch('train')

    # evaluate the loss
    logits, loss = model(xb, yb)
    optimizer.zero_grad(set_to_none=True)
    loss.backward()
    optimizer.step()

# generate from the model
context = torch.zeros((1, 1), dtype=torch.long, device=device)
print(decode(m.generate(context, max_new_tokens=2000)[0].tolist()))

